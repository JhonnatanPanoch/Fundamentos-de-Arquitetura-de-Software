Desculpas:
     - Mas o cronograma está apertado!
     - Meu chefe me pressiona a entregar logo!
     - Quero mostrar produtividade
     - Não ganho o suficiente para escrever o melhor código do mundo!
     - A empresa não valoriza bom código e sim a entrega!

Verdades que não Ihe dizem..
  - Sua carreira é sua responsabilidade!
  - eia, Estude e Pratique
  - Vá a conferências
  - Faça cursos
  - Não é da responsabilidade do seu empregador Ihe oferecer cursos,
   oportunidades ou até mesmo um projeto com a tecnologia que pretende
   se especializar.
 - "Você recebe para trabalhar 40 horas por
    semana e resolver os problemas da sua
     empresa, não os seus.." - Uncle bob

Quanto custa um código ruim?
  - Alta Rotatividade
  - Demora na entrega de novas funcionalidades
  - Dificuldade na manutenção
  - Alta incidência de bugs
  - Perda de confiança do cliente
  - Desmotivação profissional
  - Mais tempo depurando o código do que escrevendo


Como medir um bom código? 
  - Linhas de código
  - Número de métodos
  - Número de classes
  - Linhas de código por método
  - Complexidade ciclomática
  - Número de estruturas de decisão

Nomes significativos
  - Escolha os nomes que revelem intenção!
  - Por que existe
  - O que faz
  - Como é usado
  - Use nomes fáceis de se encontrar
  - Use nomes pronunciáveis
  - Evite siglas ou acrônimos
  - Não economize palavras
  - Revele a intenção do código
  - Evite palavras que podem ser variáveis ou palavras reservadas em outras plataformas
  - Evite dar nomes como "doubleValorPromocional", o tipo não precisa estar no nome
  - Evite trocadilhos, não misture idioma, não mescle nomes.

Boas praticas
  - Nome de classes devem ser substantivos e não devem conter verbos.
    Ex: ClienteRepository
  - Nomes de métodos devem conter verbos de preferência no infinitivo.
    Ex: AdicionarCliente

Menos é mais
  -	"A primeira regra dos métodos é que eles devem ser pequenos. 
     A segunda regra é que eles devem ser menores ainda." - Uncle Bob
  - Método <= 20 linhas
  - Linha <= 100 caracteres
  - Classe <= 500 linhas
  
Métodos
  - Extraia trechos em métodos privados.
  - Métodos devem fazer apenas uma coisa,
  - fazê-la certa e somente fazê-la.
  - Evite muitos parâmetros
  - Não deixe o método mentir dizendo que faz
  - uma coisa e faz outras "escondidas"
  - Se o método tiver mais de uma
  - responsabilidade extraia em dois ou mais.
  - Leia seu método de cima para baixo como
  - uma narrativa, ele deve fazer sentido.
  - Aplique uma boa indentação.
  
Comentários
  - Comentários não vão ajudar um código ruim ser melhor interpretado.
  - Um código que requer comentário, precisa ser reescrito
  - Não deixe trechos de código comentado
Quando comentar?
  - Alertar consequências que pode vir a causar
  - Licença, direitos autorais, etc.
  - Necessidade de explicar uma a regra de negócio interna.
  - Decisões de design de código
  
Tratamento de erros
  - Tratar e prever possíveis exceções é de responsabilidade do desenvolvedor.
  - Retorne exceptions e não códigos de erro.
  - Informe o máximo que puder em sua exception
  - Se necessário crie exceptions personalizadas para um problema específico.
  - Não retorne null

Regra dos escoteiros:
	"Deixe a área de acampamento mais limpa de como você
	 a encontrou."
  



